---
title: "Day 7 Activities"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(here)
```

## Task 1: Joins on birds

```{r}
bird_observations <- read_csv(here("data", "52_pp52_birds_1.csv"))

sites <- read_csv(here("data", "52_pp52_sites_1.csv"))

surveys <- read_csv(here("data", "52_pp52_surveys_1.csv"))

taxalist <- read_csv(here("data", "52_pp52_taxalist_1.csv"))
```

```{r}
# create subset
bird_subset <- bird_observations %>% 
  filter(species_id %in% c("BHCO", "RWBL"), site_id %in% c("LI-W", "NU-C"))
```

### Left join practice

-   Use left join(s) to update `birds_subset` so that it also includes `sites` and `taxalist` information. For each join, include an explicit argument saying which variable you are joining by (even if it will just assume the correct one for you). Store the updated data frame as `birds_left`. Make sure to look at the output - is what it contains consistent with what you expected it to contain?

```{r}
bird_left1 <- left_join(bird_subset, sites, by = "site_id")

bird_left <- left_join(bird_left1, taxalist, by = "species_id")
```

### Full join practice

-   First, answer: what do you expect a `full_join()` between `birds_subset` and `sites` to contain?

    -   site_id column will have ALL sites, but only bird data in the filtered species

-   Write code to `full_join` the `birds_subset` and `sites` data into a new object called `birds_full`. Explicitly include the variable you\'re joining by. Look at the output. Is it what you expected?

```{r}
birds_full <- full_join(bird_subset, sites, by = "site_id")
```

## Task 2: Data wrangling and visualization with birds

-   Starting with your `birds` object, rename the `notes` column to `bird_obs_notes` (so this doesn\'t conflict with `notes` in the `surveys` dataset

```{r}
birds <- bird_observations %>% 
  rename(bird_obs_notes = notes)
```

-   Then, create a subset that contains *all observations* in the `birds` dataset, joins the taxonomic, site and survey information to it, and is finally limited to only columns `survey_date`, `common_name`, `park_name`, and `bird_count`. You can decide the order that you want to create this in (e.g.Â limit the columns first, then join, or the other way around).

```{r}
birdsall <- left_join(birds, taxalist) %>% 
  left_join(sites) %>%
  left_join(surveys) %>% 
  select(survey_date, 
         common_name, 
         park_name, 
         bird_count) %>% 
  mutate(survey_month = lubridate::month(survey_date)) %>% 
  mutate(survey_month = as.factor(survey_month)) %>% 
  relocate(survey_month, .after = survey_date)

birds_observed <- birdsall %>% 
  group_by(park_name, survey_month) %>% 
  summarize(tot_birds_observed = n()) %>% 
  filter(park_name %in% c("Lindo", "Orme", "Palomino", "Sonrisa"))
```
